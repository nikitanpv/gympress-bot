# ai_core.py

import openai
import langdetect
from config import OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY

async def generate_workout(user_input: str, last_workout: str = "") -> str:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞
    try:
        lang = langdetect.detect(user_input)
    except Exception:
        lang = "en"

    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
    user_input_lower = user_input.lower()
    wants_translation = any(phrase in user_input_lower for phrase in [
        "–ø–µ—Ä–µ–≤–µ–¥–∏", "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "translate", "in english", "english version"
    ])

    # –ï—Å–ª–∏ —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ –∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî –ø–µ—Ä–µ–≤–µ–¥—ë–º –µ—ë
    if wants_translation and last_workout:
        user_input = f"{user_input}\n\n–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n{last_workout}"

    # –ü—Ä–æ–º–ø—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    if lang == "ru":
        system_prompt = (
            "–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —Å–æ—Å—Ç–∞–≤—å. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏. "
            "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏, —Å–∫–∞–∂–∏: "
            "¬´–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ üí™¬ª ‚Äî –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ."
        )
    else:
        system_prompt = (
            "You are a virtual fitness coach. "
            "If the user asks for a workout, create one. "
            "If the user asks to translate the previous workout, do it. "
            "If the message is not related to training, say: "
            "‚ÄúI can only help with training plans üí™‚Äù ‚Äî and nothing else."
        )

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_input}
    ]

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=600,
        )
        return response.choices[0].message["content"].strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {str(e)}"
